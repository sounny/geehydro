// Earth Engine D8 flow direction demo with a small floating UI (does not cover map)

// Reference flow direction (HydroSHEDS D8 encoding)
var reference = ee.Image('WWF/HydroSHEDS/03DIR'); // values: 0,1,2,4,8,16,32,64,128

// DEM options (first band used)
var demList = {
  'HydroSHEDS 03VFDEM': ee.Image('WWF/HydroSHEDS/03VFDEM'),
  'JAXA AW3D30 (mosaic)': ee.ImageCollection('JAXA/ALOS/AW3D30/V4_1').mosaic(),
  'NASA ASTER GED': ee.Image('NASA/ASTER_GED/AG100_003'),
  'Copernicus GLO-30 (mosaic)': ee.ImageCollection('COPERNICUS/DEM/GLO30').mosaic(),
  'USGS SRTMGL1': ee.Image('USGS/SRTMGL1_003'),
  'USGS GTOPO30': ee.Image('USGS/GTOPO30'),
  'NOAA ETOPO1': ee.Image('NOAA/NGDC/ETOPO1')
  // Note: CSP/ERGo SRTM_topoDiversity is not an elevation; omitted for D8.
};

// D8 direction palette/indexing
var dirValues = [0, 1, 2, 4, 8, 16, 32, 64, 128];
var dirIdx    = [0, 1, 2, 3, 4, 5, 6, 7, 8];
var dirPalette = [
  '888888', // 0 = flat/sink/no downhill
  'ff0000', // 1  = E
  'ff7f00', // 2  = SE
  'ffff00', // 4  = S
  '00ff00', // 8  = SW
  '00ffff', // 16 = W
  '0000ff', // 32 = NW
  '7f00ff', // 64 = N
  'ff00ff'  // 128 = NE
];

// D8 flow direction from a single-band DEM.
// Returns byte image with D8 codes (0,1,2,4,8,16,32,64,128)
function D8Algorithm(dem) {
  var band = ee.String(dem.bandNames().get(0));
  var neighborhood = dem.neighborhoodToBands(ee.Kernel.square(1));
  var center = neighborhood.select(band.cat('_0_0'));

  var offsets = [
    [-1, -1], [-1, 0], [-1, 1],
    [ 0, -1],           [ 0, 1],
    [ 1, -1], [ 1, 0],  [ 1, 1]
  ];
  var directions = [32, 64, 128, 16, 1, 8, 4, 2];
  var distances = [Math.SQRT2, 1, Math.SQRT2, 1, 1, Math.SQRT2, 1, Math.SQRT2];

  var maxSlope = ee.Image(-9999);
  var flowDir = ee.Image(0).byte();

  for (var i = 0; i < 8; i++) {
    var row = offsets[i][0];
    var col = offsets[i][1];
    var bandName = band.cat('_').cat(ee.Number(row).format('%d')).cat('_').cat(ee.Number(col).format('%d'));
    var neighbor = neighborhood.select(bandName);
    var slope = center.subtract(neighbor).divide(distances[i]);
    var dirImg = ee.Image.constant(directions[i]).byte();
    var replace = slope.gt(maxSlope).and(slope.gt(0));
    maxSlope = maxSlope.where(replace, slope);
    flowDir = flowDir.where(replace, dirImg);
  }
  return flowDir.rename('flowDirection');
}

// UI: selector and inspector (floating, top-right, small)
var demNames = Object.keys(demList);
var demSelect = ui.Select({
  items: demNames,
  value: demNames[0]
});

var infoLabel = ui.Label('Click the map to inspect D8 values.');
var calcLabel = ui.Label('Calculated Flow Direction:');
var refLabel  = ui.Label('Reference Flow Direction:');

var content = ui.Panel({
  widgets: [
    ui.Panel([ui.Label('Select DEM:'), demSelect], ui.Panel.Layout.flow('horizontal')),
    infoLabel,
    calcLabel,
    refLabel
  ],
  layout: ui.Panel.Layout.flow('vertical')
});

// Simple collapse/expand
var collapsed = false;
var toggleBtn = ui.Button({
  label: 'Hide',
  onClick: function() {
    collapsed = !collapsed;
    content.style().set('shown', !collapsed);
    toggleBtn.setLabel(collapsed ? 'Show' : 'Hide');
  },
  style: {stretch: 'horizontal'}
});

var controlPanel = ui.Panel({
  widgets: [ui.Label('D8 Flow Direction', {fontWeight: 'bold'}), toggleBtn, content],
  style: {
    position: 'top-right',
    padding: '8px',
    width: '300px',
    backgroundColor: 'rgba(255,255,255,0.9)'
  }
});

// Add floating panel without clearing the root so the map stays visible
ui.root.add(controlPanel);

Map.style().set('cursor', 'crosshair');

// Global state to avoid stacking multiple click handlers
var state = {
  elevation: null,
  flowDirection: null,
  nativeScale: null
};

// One-time click handler uses current state
Map.onClick(function(coords) {
  if (!state.flowDirection) return;
  var pt = ee.Geometry.Point([coords.lon, coords.lat]);
  calcLabel.setValue('Calculated Flow Direction: loading...');
  refLabel.setValue('Reference Flow Direction: loading...');

  var calc = state.flowDirection.reduceRegion({
    reducer: ee.Reducer.first(),
    geometry: pt,
    scale: state.nativeScale,
    bestEffort: true
  }).get('flowDirection');

  var ref = reference.reduceRegion({
    reducer: ee.Reducer.first(),
    geometry: pt,
    scale: state.nativeScale,
    bestEffort: true
  }).get('b1');

  calc.evaluate(function(v) {
    calcLabel.setValue('Calculated Flow Direction: ' + ((v === null || v === undefined) ? 'No data' : v));
  });
  ref.evaluate(function(v) {
    refLabel.setValue('Reference Flow Direction: ' + ((v === null || v === undefined) ? 'No data' : v));
  });
});

// Update map with selected DEM
function updateMap(name) {
  var elevation = demList[name];
  var flowDirection = D8Algorithm(elevation);
  var nativeScale = elevation.projection().nominalScale();

  state.elevation = elevation;
  state.flowDirection = flowDirection;
  state.nativeScale = nativeScale;

  var flowDirIdx = flowDirection.remap(dirValues, dirIdx).rename('flowDirIdx');
  var refIdx = reference.remap(dirValues, dirIdx).rename('refIdx');

  Map.clear();
  Map.addLayer(refIdx, {min: 0, max: 8, palette: dirPalette}, 'Reference (HydroSHEDS D8)');
  Map.addLayer(flowDirIdx, {min: 0, max: 8, palette: dirPalette}, 'Computed D8 (' + name + ')');
  Map.centerObject(elevation, 6);
}

// Wire up the selector and render
demSelect.onChange(updateMap);
updateMap(demSelect.getValue());
