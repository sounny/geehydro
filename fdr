// Define the Area of Interest (AOI) for Gainesville, FL.
var GainesvilleAOI = ee.Geometry.Rectangle(-82.5, 29.5, -82.2, 29.8);

// Load the HydroSHEDS elevation model and clip it to the AOI.
var elevation = ee.Image("WWF/HydroSHEDS/03VFDEM").clip(GainesvilleAOI);

// Load the HydroSHEDS flow direction reference and clip it to the AOI.
var reference = ee.Image("WWF/HydroSHEDS/03DIR").clip(GainesvilleAOI);

/**
 * Calculate flow direction using the D8 algorithm.
 * Each cell drains to the neighboring cell with the steepest downward slope.
 * Direction codes follow the standard D8 clockwise encoding starting at east.
 *   1 = E, 2 = SE, 4 = S, 8 = SW,
 *   16 = W, 32 = NW, 64 = N, 128 = NE
 * Cells with no lower neighbor are set to 0.
 */
var D8Algorithm = function(dem) {
  var band = ee.String(dem.bandNames().get(0));
  // Extract a 3x3 neighborhood around each pixel.
  var neighborhood = dem.neighborhoodToBands(ee.Kernel.square(1));
  var center = neighborhood.select(band.cat('_0_0'));

  // Neighbor offsets (row, col) clockwise from NW.
  var offsets = [
    [-1, -1], [-1, 0], [-1, 1],
    [0, -1],            [0, 1],
    [1, -1], [1, 0],  [1, 1]
  ];
  // Direction values matching the offsets above.
  var directions = [32, 64, 128, 16, 1, 8, 4, 2];
  // Distance to each neighbor used in slope calculation.
  var distances = [Math.SQRT2, 1, Math.SQRT2, 1, 1, Math.SQRT2, 1, Math.SQRT2];

  var maxSlope = ee.Image(-9999);
  var flowDir = ee.Image(0).byte();

  for (var i = 0; i < 8; i++) {
    var row = offsets[i][0];
    var col = offsets[i][1];
    // Convert the numeric row/col indices to strings so they can be
    // concatenated with the band name. Without this conversion, the
    // String.cat operation throws a type error in Earth Engine.
    var rowStr = ee.Number(row).format();
    var colStr = ee.Number(col).format();
    var neighbor = neighborhood.select(band.cat('_').cat(rowStr).cat('_').cat(colStr));
    var slope = center.subtract(neighbor).divide(distances[i]);
    var dirImg = ee.Image.constant(directions[i]).byte();
    // Update if this neighbor has the steepest downward slope so far
    var replace = slope.gt(maxSlope).and(slope.gt(0));
    maxSlope = maxSlope.where(replace, slope);
    flowDir = flowDir.where(replace, dirImg);
  }

  // Keep cells with no downhill neighbor set to 0 instead of masking
  return flowDir.rename('flowDirection');
};

var flowDirection = D8Algorithm(elevation);

Map.addLayer(flowDirection, {min: 0, max: 128}, 'Flow Direction');
Map.addLayer(reference, {min: 0, max: 128}, 'Reference');

// Center the map on the AOI.
Map.centerObject(GainesvilleAOI, 10);
